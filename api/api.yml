openapi: "3.0.0"
info:
  version: 1.0.0
  title: Notificationaway service
  description: Manage so many staff
  contact:
    name: Amr H
    email: amr.hassan.abdullah@gmail.com
  license:
    name: Copyright (c) 2021 NULL
servers:
  - url: http://notificationaway.svc/api/v1
components:
  schemas:

    Error:
      properties:
        errors:
          type: array
          items:
            type: string
      required:
        - errors

    NewMessage:
      properties:
        template:
          type: string
          minLength: 5
          maxLength: 256
          description: Message content
        template_keys:
          type: array
          items:
            type: string
        type:
          type: string
          minLength: 60
          maxLength: 260
          description: will be used as part of the uniqunes of the message for example type could be greetings, driver arrived,...etc
        language:
          type: string
          enum: [ar,en]
        provider_type:
          type: string
          enum: [ SMS, Push ]
      required:
        - template
        - type
        - language
        - provider_type
    TriggerMessage:
      properties:
        message_type:
          type: string
          minLength: 5
          maxLength: 256
          description: message type
        users_ids:
          type: array
          items:
            type: string
      required:
        - users_ids
        - message_type
    MessageResponse:
      allOf:
        - $ref: '#/components/schemas/NewMessage'
        - type: object
          properties:
            id:
              type: string
            created_at:
              type: string
              format: date-time
              description: timestamp full-date - RFC3339
            updated_at:
              type: string
              format: date-time
              description: timestamp full-date - RFC3339
          required:
            - id
            - created_at
            - updated_at
    QueryMessagesFilters:
      properties:
        name:
          type: string
    QueryMessagesBody:
      required:
        - filters
        - page
        - limit
        - sort_by
        - sort_direction
      properties:
        filters:
          $ref: '#/components/schemas/QueryMessagesFilters'
        page:
          type: integer
          format: int64
          minimum: 0
          default: 0
        limit:
          type: integer
          format: int64
          minimum: 1
          maximum: 1000
          default: 100
        sort_by:
          type: string
          enum: [ created_at, updated_at, template ]
          default: created_at
        sort_direction:
          type: string
          enum: [ asc, desc ]
          default: desc

    QueryMessagesResponse:
      allOf:
        - required:
            - data
            - count
            - page
            - limit
            - has_next
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/MessageResponse'
            count:
              type: integer
              format: int64
            page:
              type: integer
              format: int64
            limit:
              type: integer
              format: int64
            has_next:
              type: boolean


paths:
  /messages:
    post:
      summary: Creates a new message
      description: Creates a new message.
      operationId: addMessage
      requestBody:
        description: Message to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewMessage'
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: user write conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /messages/trigger:
    post:
      summary: trigger messages manually
      description: used to trigger messages for certin users manually
      operationId: triggerMessage
      requestBody:
        description: Message to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TriggerMessage'
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '409':
          description: user write conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /messages/{message_id}:
    get:
      summary: Get message details
      description: Get message by id
      operationId: getMessage
      parameters:
        - name: message_id
          in: path
          description: "ID of message to return"
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: message exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '404':
          description: not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
